export declare function shuffle<T>(array: T[]): T[];
export declare function getProp(obj: Record<string, any>, key: string): any;
export declare function setProp(obj: Record<string, any>, key: string, value: any): void;
export declare function delProp(obj: Record<string, any>, key: string): void;
export declare function setGetter(obj: Record<string, any>, key: string, fn: () => any): void;
export declare function arr2obj<T>(arr: string[], value: T): Record<string, T>;
export declare function reverse<T>(arr: T[]): T[];
export declare function parseArgs<B extends string, O extends number | string | Record<string, any>>(orderby: B, order: O): {
    [key in typeof orderby]: typeof order;
};
export declare function parseArgs<B extends string, O>(orderby: B): Record<string, number>;
export declare function parseArgs<B extends Record<string, number>, O>(orderby: B): B;
export declare function parseArgs<B extends string | Record<string, number | Record<string, any>>, O extends number | string | Record<string, any>>(orderby: B, order?: O): Record<string, number | string | object>;
